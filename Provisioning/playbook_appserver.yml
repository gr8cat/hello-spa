- hosts: all
  vars_files: vars.yml
  tasks:
    - name: configure hosts
      block:  
        - name: add ip and hostname runner to hosts file
          lineinfile:
            path: /etc/hosts
            line: "{{ v_ip_registry }} {{ v_hostname_registry }}"
            state: present

        - name: add ip and hostname appserver to hosts file
          lineinfile:
            path: /etc/hosts
            line: "{{ v_ip_appserver }} {{ v_hostname_appserver }}"
            state: present
      become: yes
      become_user: root
      become_method: sudo

    - name: check docker if installed
      stat:
        path: /usr/bin/docker
      register: docker_file

    - name: install docker
      shell: cd ~ && curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh
      when: not docker_file.stat.exists

    - name: start docker service
      ansible.builtin.service:
        name: docker
        state: started 
        enabled: yes
      become: yes
      become_user: root
      become_method: sudo

    - name: add vagrant user to docker group
      user:
        name: vagrant
        groups: docker
        append: yes
      become: yes
      become_user: root
      become_method: sudo

    - name: reset ssh connection to allow user changes to affect ansible user
      ansible.builtin.meta:
        reset_connection

#    - name: set permissions on /var/run/docker.sock (workaroud)
#      file:
#        path: /var/run/docker.sock
#        mode: '0666'
#      become: yes
#      become_user: root
#      become_method: sudo

    - name: get public key from github
      uri:
        url: "https://api.github.com/repos/{{ v_owner }}/{{ v_repo }}/actions/secrets/public-key"
        headers:
          Accept: application/vnd.github+json
          Authorization: "token {{ v_access_token }}" 
      register: public_key_info

    - name: show public key info
      debug:
        msg: "{{ public_key_info }}"

    - name: set public key
      set_fact:
        public_key: "{{ public_key_info | json_query(jmesquery) }}"
      vars:
        jmesquery: 'json.key' 

    - name: set key id
      set_fact:
        key_id: "{{ public_key_info | json_query(jmesquery) }}"
      vars:
        jmesquery: 'json.key_id'

    - name: show public key
      debug:
        msg: "{{ public_key }}"

    - name: get python-pynacl module for encryption
      get_url:
        url:  https://cbs.centos.org/kojifiles/packages/python-pynacl/1.3.0/1.el7/x86_64/python2-pynacl-1.3.0-1.el7.x86_64.rpm
        dest: /vagrant
        validate_certs: no

    - name: install python-pynacl module from file
      yum:
        name: /vagrant/python2-pynacl-1.3.0-1.el7.x86_64.rpm 
        state: present
      become: yes
      become_user: root
      become_method: sudo

    - name: generate python script for encrypting secrets
      copy:
        dest: encrypt.py
        content: |
          # script from github.com with changes for python2
          from base64 import b64encode
          from nacl import encoding, public
          import sys

          def encrypt(public_key, secret_value):
            public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
            sealed_box = public.SealedBox(public_key)
            encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
            return b64encode(encrypted).decode("utf-8")

          print(encrypt(sys.argv[1], sys.argv[2]))

    - name: generate ssh key for vagrant user
      shell: yes | ssh-keygen -t ed25519 -a 200 -N "" -f ~/.ssh/id_ed25519

    - name: read ssh private key into variable
      set_fact:
        ssh_priv_key: "{{ lookup('file', '~/.ssh/id_ed25519') }}"

    - name: encrypt ssh private key of vagrant user
      shell: "python2.7 ./encrypt.py {{ public_key }} \'{{ ssh_priv_key }}\'"
      register: encrypted_ssh_priv_key

    - name: show encrypted_ssh_priv_key
      debug:
        msg: "{{ encrypted_ssh_priv_key }}"

    - name: set authorized key
      authorized_key:
        user: vagrant
        state: present
        key: "{{ lookup('file', '~/.ssh/id_ed25519.pub') }}"

    - name: add inscecure docker registry
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "insecure-registries" : [ "{{ v_hostname_registry }}:5000" ]
          }
      become: yes
      become_user: root
      become_method: sudo
      notify: restart docker

    - name: restart docker service
      ansible.builtin.service:
        name: docker
        state: restarted
      become: yes
      become_user: root
      become_method: sudo

    - name: create or update secret with ssh pub key
      uri:
        url: "https://api.github.com/repos/{{ v_owner }}/{{ v_repo }}/actions/secrets/{{ item.secret_name }}"
        method: PUT
        status_code: [201, 204]
        headers:
          Accept: application/vnd.github+json
          Authorization: "token {{ v_access_token }}" 
        body_format: json
        body:
          { "encrypted_value": "{{ item.value }}",
            "key_id": "{{ key_id }}" }
      loop:
        - { secret_name: 'PRIVATE_KEY', value: "{{ encrypted_ssh_priv_key.stdout }}" }

  handlers:
    - name: restart docker
      service:
        name: docker
        state: restarted
      become: yes
      become_user: root
      become_method: sudo


